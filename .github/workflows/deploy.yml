name: Deploy to Lightsail

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    name: Build and Deploy to Lightsail
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
      
      # BUILD COMPLETO EN GITHUB ACTIONS (como .NET)
      - name: Install all dependencies
        run: npm ci
      
      - name: Build frontend
        run: |
          cd client
          npm ci
          npm run build
          cd ..
      
      - name: Build backend with esbuild
        run: |
          # NO HACER BUNDLE - solo copiar código fuente
          # El bundle de esbuild tiene problemas con dotenv
          echo "Skipping esbuild bundle - using tsx directly"
      
      - name: Prepare deployment package
        run: |
          # Crear directorio de deployment
          mkdir -p deploy-package
          
          # Copiar todo el código fuente del servidor (no bundleado)
          cp -r server deploy-package/
          cp -r db deploy-package/ 2>/dev/null || true
          
          # Copiar frontend compilado
          cp -r dist deploy-package/
          
          # Crear package.json optimizado con TODAS las dependencias necesarias
          cat package.json | jq '
            {
              name: .name,
              version: .version,
              type: .type,
              scripts: {start: "tsx server/index.ts"},
              dependencies: .dependencies
            }
          ' > deploy-package/package.json
          
          # Copiar archivos de configuración
          cp .env.example deploy-package/.env 2>/dev/null || true
          
          # Crear archivo de inicio optimizado
          echo '#!/bin/bash
          cd /home/ubuntu/billeo
          export NODE_ENV=production
          export PORT=3000
          tsx server/index.ts' > deploy-package/start.sh
          chmod +x deploy-package/start.sh
          
          # Verificar contenido
          ls -la deploy-package/
          echo "=== Package.json dependencies count ==="
          cat deploy-package/package.json | jq '.dependencies | length'

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # Detener aplicación actual
          ssh $SSH_USER@$SERVER_IP 'pm2 stop billeo || true'
          
          # Crear directorio y limpiar deployment anterior
          ssh $SSH_USER@$SERVER_IP 'mkdir -p /home/ubuntu/billeo && rm -rf /home/ubuntu/billeo/*'
          
          # Copiar package completo (como .NET publish)
          rsync -avz ./deploy-package/ $SSH_USER@$SERVER_IP:/home/ubuntu/billeo/
          
          # Instalar tsx globalmente para poder ejecutar TypeScript directamente
          ssh $SSH_USER@$SERVER_IP 'sudo npm install -g tsx'
          
          # Instalar dependencias completas (pero más rápido que antes porque no hay compilación pesada)
          ssh $SSH_USER@$SERVER_IP 'cd /home/ubuntu/billeo && npm install --production'
          
          # Configurar nginx
          ssh $SSH_USER@$SERVER_IP 'sudo tee /etc/nginx/sites-available/default > /dev/null <<EOF
          server {
              listen 80;
              server_name _;
              
              # Servir archivos estáticos del frontend
              location / {
                  root /home/ubuntu/billeo/dist/public;
                  try_files \$uri \$uri/ /index.html;
              }
              
              # Proxy para API
              location /api/ {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF'
          
          # Reiniciar nginx
          ssh $SSH_USER@$SERVER_IP 'sudo systemctl reload nginx'
          
          # Iniciar aplicación con el archivo compilado
          ssh $SSH_USER@$SERVER_IP 'cd /home/ubuntu/billeo && pm2 start tsx --name billeo -- server/index.ts' 