name: Setup SSL Certificate

on:
  workflow_dispatch:

jobs:
  setup-ssl:
    name: Setup SSL with Let's Encrypt
    runs-on: ubuntu-latest
    
    steps:
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Install Certbot and setup SSL
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "=== INSTALLING CERTBOT ==="
          ssh $SSH_USER@$SERVER_IP 'sudo apt update'
          ssh $SSH_USER@$SERVER_IP 'sudo apt install -y certbot python3-certbot-nginx'
          
          echo "=== CURRENT NGINX CONFIG ==="
          ssh $SSH_USER@$SERVER_IP 'sudo cat /etc/nginx/sites-available/default'

      - name: Configure nginx for SSL
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "=== CONFIGURING NGINX FOR SSL ==="
          
          ssh $SSH_USER@$SERVER_IP 'sudo tee /etc/nginx/sites-available/default > /dev/null << EOF
          server {
              listen 80;
              listen [::]:80;
              
              server_name app.billeo.es;
              
              # Let's Encrypt verification
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
              
              # Redirect all other HTTP to HTTPS
              location / {
                  return 301 https://\$server_name\$request_uri;
              }
          }
          
          server {
              listen 443 ssl http2;
              listen [::]:443 ssl http2;
              
              server_name app.billeo.es;
              
              # SSL configuration (will be filled by certbot)
              # ssl_certificate /etc/letsencrypt/live/app.billeo.es/fullchain.pem;
              # ssl_certificate_key /etc/letsencrypt/live/app.billeo.es/privkey.pem;
              
              # Security headers
              add_header X-Frame-Options SAMEORIGIN;
              add_header X-Content-Type-Options nosniff;
              add_header X-XSS-Protection "1; mode=block";
              add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
              
              location / {
                  proxy_pass http://127.0.0.1:3000;
                  proxy_http_version 1.1;
                  
                  # Essential headers
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto https;
                  proxy_set_header X-Forwarded-Host \$server_name;
                  
                  # WebSocket support
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "upgrade";
                  
                  # Timeout settings
                  proxy_connect_timeout 60s;
                  proxy_send_timeout 60s;
                  proxy_read_timeout 60s;
                  
                  # Buffer settings
                  proxy_buffering on;
                  proxy_buffer_size 4k;
                  proxy_buffers 8 4k;
                  proxy_busy_buffers_size 8k;
                  
                  proxy_cache_bypass \$http_upgrade;
              }
              
              # Handle favicon
              location /favicon.ico {
                  proxy_pass http://127.0.0.1:3000/favicon.ico;
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
          }
          EOF'
          
          echo "=== TESTING NGINX CONFIG ==="
          ssh $SSH_USER@$SERVER_IP 'sudo nginx -t'
          ssh $SSH_USER@$SERVER_IP 'sudo systemctl reload nginx'

      - name: Obtain SSL certificate
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "=== OBTAINING SSL CERTIFICATE ==="
          
          # Create webroot directory
          ssh $SSH_USER@$SERVER_IP 'sudo mkdir -p /var/www/html'
          
          # Obtain certificate
          ssh $SSH_USER@$SERVER_IP 'sudo certbot --nginx -d app.billeo.es --non-interactive --agree-tos --email admin@billeo.es --redirect'

      - name: Verify SSL setup
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "=== VERIFYING SSL SETUP ==="
          
          # Wait for nginx to reload
          sleep 5
          
          echo "Testing HTTP (should redirect to HTTPS):"
          ssh $SSH_USER@$SERVER_IP 'curl -I http://app.billeo.es'
          
          echo ""
          echo "Testing HTTPS:"
          ssh $SSH_USER@$SERVER_IP 'curl -I https://app.billeo.es'
          
          echo ""
          echo "SSL certificate status:"
          ssh $SSH_USER@$SERVER_IP 'sudo certbot certificates'
          
          echo ""
          echo "Final nginx configuration:"
          ssh $SSH_USER@$SERVER_IP 'sudo cat /etc/nginx/sites-available/default'

      - name: Setup auto-renewal
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          echo "=== SETTING UP AUTO-RENEWAL ==="
          
          # Add cron job for auto-renewal
          ssh $SSH_USER@$SERVER_IP 'echo "0 12 * * * /usr/bin/certbot renew --quiet" | sudo crontab -'
          
          # Test renewal process
          ssh $SSH_USER@$SERVER_IP 'sudo certbot renew --dry-run'
          
          echo "SSL setup completed successfully!" 