Perfecto. Te paso ahora un ejemplo visual y una base de código (tipo React + Tailwind) que podrías adaptar a tu entorno de Replit si estás usando frontend moderno. Esto sirve como punto de partida para construir la tarjeta.

⸻

Ejemplo visual (estructura tipo Apple)

+---------------------------------------------------+
| Gastos por Categoría                              |
|---------------------------------------------------|
| [Ícono] Marketing              1.200,00 €         |
| [Ícono] Software               890,00 €           |
| [Ícono] Transporte             320,00 €           |
|                                                   |
| [Gráfico tipo barra o pastel aquí]                |
+---------------------------------------------------+

Si no hay datos:

+---------------------------------------------------+
| Gastos por Categoría                              |
|                                                   |
|         [Icono de gráfico gris]                   |
|         No hay gastos registrados                 |
|         No hay transacciones en este periodo      |
+---------------------------------------------------+



⸻

Ejemplo base de código en React (con TailwindCSS)

import { useEffect, useState } from "react";

const GastosPorCategoria = ({ gastos, periodo }) => {
  const [gastosFiltrados, setGastosFiltrados] = useState([]);
  const [totalesPorCategoria, setTotalesPorCategoria] = useState({});

  useEffect(() => {
    // Filtrar por periodo
    const filtrados = gastos.filter((gasto) => {
      const fecha = new Date(gasto.fecha);
      // Aquí debes adaptar según cómo venga la fecha y el filtro de periodo
      return cumpleFiltroDePeriodo(fecha, periodo);
    });

    // Agrupar por categoría
    const agrupados = {};
    filtrados.forEach((gasto) => {
      const categoria = gasto.categoria;
      const baseImponible = parseFloat(gasto.baseImponible) || 0;
      if (!agrupados[categoria]) agrupados[categoria] = 0;
      agrupados[categoria] += baseImponible;
    });

    setGastosFiltrados(filtrados);
    setTotalesPorCategoria(agrupados);
  }, [gastos, periodo]);

  const hayDatos = Object.keys(totalesPorCategoria).length > 0;

  return (
    <div className="bg-white rounded-xl shadow-md p-6">
      <h2 className="text-xl font-semibold mb-4">Gastos por Categoría</h2>
      {hayDatos ? (
        <>
          <div className="space-y-2">
            {Object.entries(totalesPorCategoria).map(([cat, total]) => (
              <div key={cat} className="flex justify-between items-center">
                <div className="flex items-center gap-2">
                  <span className="text-gray-600">{getIconoCategoria(cat)}</span>
                  <span>{cat}</span>
                </div>
                <span className="font-medium">{total.toFixed(2)} €</span>
              </div>
            ))}
          </div>

          {/* Aquí podrías insertar una librería de gráficos como Chart.js o Recharts */}
          <div className="mt-6">
            {/* Gráfico */}
          </div>
        </>
      ) : (
        <div className="text-center text-gray-400 mt-12">
          <div className="text-4xl mb-2">📊</div>
          <p className="font-medium">No hay gastos registrados</p>
          <p className="text-sm">No hay transacciones en este periodo</p>
        </div>
      )}
    </div>
  );
};

// Utilidad para el filtro por periodo (año o trimestre)
const cumpleFiltroDePeriodo = (fecha, periodo) => {
  // Aquí puedes implementar la lógica real
  return true;
};

// Devuelve un icono según la categoría
const getIconoCategoria = (categoria) => {
  const iconos = {
    Marketing: "📢",
    Software: "💻",
    Transporte: "🚗",
    // ...
  };
  return iconos[categoria] || "📁";
};

export default GastosPorCategoria;



⸻

¿Quieres que lo ajustemos también para que se conecte a un backend específico o que se muestre con datos de prueba?