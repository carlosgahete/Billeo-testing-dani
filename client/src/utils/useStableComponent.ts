/**
 * useStableComponent
 * 
 * Este hook proporciona una manera de garantizar que un componente est√©
 * completamente estable antes de permitir interacciones con √©l. Espera a que
 * todas las actualizaciones de estado hayan terminado y luego permite la interacci√≥n.
 * 
 * √ötil para componentes que sufren de "eventos fantasma" debido a renderizados
 * muy r√°pidos o condiciones de carrera.
 */

import { useState, useEffect, useRef } from 'react';

interface StableComponentOptions {
  /** Tiempo m√≠nimo (ms) de estabilidad antes de permitir interacciones */
  stabilityDelay?: number;
  /** Si deber√≠a bloquear interacciones mientras el componente no est√© estable */
  blockInteractions?: boolean;
  /** Log de depuraci√≥n */
  debug?: boolean;
}

export function useStableComponent(options: StableComponentOptions = {}) {
  const {
    stabilityDelay = 1500, // Por defecto, medio segundo para estabilizarse
    blockInteractions = true,
    debug = true,
  } = options;

  // Estado que indica si el componente est√° estable
  const [isStable, setIsStable] = useState(false);
  
  // Contador de renderizados para detectar estabilidad
  const renderCountRef = useRef(0);
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const componentMountedAtRef = useRef(Date.now());

  // Incrementamos el contador de renderizados en cada render
  renderCountRef.current += 1;

  // Efecto para marcar el componente como estable despu√©s del delay
  useEffect(() => {
    // Reiniciamos cualquier timeout previo
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }

    if (debug) {
      console.log(`üß© [useStableComponent] Componente renderizado #${renderCountRef.current}, esperando ${stabilityDelay}ms para estabilidad...`);
    }

    // Configuramos el nuevo timeout para marcar como estable
    timeoutRef.current = setTimeout(() => {
      setIsStable(true);
      if (debug) {
        const timeElapsed = Date.now() - componentMountedAtRef.current;
        console.log(`‚úÖ [useStableComponent] Componente estable despu√©s de ${timeElapsed}ms y ${renderCountRef.current} renderizados.`);
      }
    }, stabilityDelay);

    // Limpieza al desmontar
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []); // Solo en el montaje inicial

  // Funci√≥n para comprobar si se debe permitir una interacci√≥n
  const shouldAllowInteraction = () => {
    // Si no estamos bloqueando interacciones, siempre permitir
    if (!blockInteractions) return true;
    
    // En caso contrario, permitir solo si el componente est√° estable
    return isStable;
  };

  // Funci√≥n para envolver manejadores de eventos
  const withStability = <T extends any[]>(
    handler: (...args: T) => void
  ) => {
    return (...args: T) => {
      // Verificar si debemos permitir la interacci√≥n
      if (shouldAllowInteraction()) {
        if (debug && !isStable) {
          console.warn(`‚ö†Ô∏è [useStableComponent] Permitiendo interacci√≥n en componente inestable (${renderCountRef.current} renderizados)`);
        }
        // Ejecutar el manejador original si est√° permitido
        handler(...args);
      } else {
        if (debug) {
          console.log(`üõ°Ô∏è [useStableComponent] Bloqueando interacci√≥n, componente a√∫n no estable (${renderCountRef.current} renderizados)`);
        }
      }
    };
  };

  return {
    isStable,
    withStability,
    renderCount: renderCountRef.current,
  };
}