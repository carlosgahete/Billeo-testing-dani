// Variable para controlar el debounce sin perder el foco
let lastCalculationTimeout: NodeJS.Timeout | null = null;

// Función auxiliar para calcular totales (definida globalmente para evitar referencias circulares)
function calculateInvoiceTotals(form: any) {
  // Limpiamos el timeout anterior si existe
  if (lastCalculationTimeout) {
    clearTimeout(lastCalculationTimeout);
  }
  
  // Creamos un nuevo timeout con un pequeño retraso para no interrumpir la entrada
  lastCalculationTimeout = setTimeout(() => {
    const items = form.getValues("items") || [];
    const additionalTaxes = form.getValues("additionalTaxes") || [];
    
    // Calculate subtotal for each item
    const updatedItems = items.map((item: any) => {
      const quantity = toNumber(item.quantity, 0);
      const unitPrice = toNumber(item.unitPrice, 0);
      const subtotal = quantity * unitPrice;
      
      return {
        ...item,
        quantity: quantity,
        unitPrice: unitPrice,
        subtotal: subtotal
      };
    });
    
    // Usamos shouldValidate: false para evitar validaciones que puedan causar pérdida de foco
    form.setValue("items", updatedItems, { shouldValidate: false });
    
    // Calculate invoice totals
    const subtotal = updatedItems.reduce((sum: number, item: any) => sum + toNumber(item.subtotal, 0), 0);
    const tax = updatedItems.reduce((sum: number, item: any) => {
      const itemTax = toNumber(item.subtotal, 0) * (toNumber(item.taxRate, 0) / 100);
      return sum + itemTax;
    }, 0);
    
    // Calcular el importe total de impuestos adicionales
    let additionalTaxesTotal = 0;
    
    additionalTaxes.forEach((taxItem: any) => {
      if (taxItem.isPercentage) {
        const percentageTax = subtotal * (toNumber(taxItem.amount, 0) / 100);
        additionalTaxesTotal += percentageTax;
      } else {
        additionalTaxesTotal += toNumber(taxItem.amount, 0);
      }
    });
    
    const total = subtotal + tax + additionalTaxesTotal;
    const safeTotal = Math.max(0, total);
    
    // Actualizamos sin validar para mantener el foco
    form.setValue("subtotal", subtotal, { shouldValidate: false });
    form.setValue("tax", tax, { shouldValidate: false });
    form.setValue("total", safeTotal, { shouldValidate: false });
  }, 5); // Retraso mínimo para evitar perder el foco
}